Index: external/mit/lua/dist/src/lauxlib.c
===================================================================
RCS file: /cvsroot/src/external/mit/lua/dist/src/lauxlib.c,v
retrieving revision 1.6
diff -u -r1.6 lauxlib.c
--- external/mit/lua/dist/src/lauxlib.c	28 Jan 2016 14:41:39 -0000	1.6
+++ external/mit/lua/dist/src/lauxlib.c	21 Apr 2016 17:13:56 -0000
@@ -228,7 +228,6 @@
 }
 
 
-#ifndef _KERNEL
 LUALIB_API int luaL_fileresult (lua_State *L, int stat, const char *fname) {
   int en = errno;  /* calls to Lua API may change this value */
   if (stat) {
@@ -245,7 +244,6 @@
     return 3;
   }
 }
-#endif /* _KERNEL */
 
 
 #if !defined(l_inspectstat)	/* { */
@@ -270,7 +268,6 @@
 #endif				/* } */
 
 
-#ifndef _KERNEL
 LUALIB_API int luaL_execresult (lua_State *L, int stat) {
   const char *what = "exit";  /* type of termination */
   if (stat == -1)  /* error? */
@@ -286,7 +283,6 @@
     return 3;  /* return true/nil,what,code */
   }
 }
-#endif /* _KERNEL */
 
 /* }====================================================== */
 
@@ -630,7 +626,6 @@
 ** =======================================================
 */
 
-#ifndef _KERNEL
 typedef struct LoadF {
   int n;  /* number of pre-read characters */
   FILE *f;  /* file being read */
@@ -651,6 +646,9 @@
        The next check avoids this problem. */
     if (feof(lf->f)) return NULL;
     *size = fread(lf->buff, 1, sizeof(lf->buff), lf->f);  /* read block */
+#ifdef _KERNEL
+    if (*size == 0) return NULL;
+#endif /* _KERNEL */
   }
   return lf->buff;
 }
@@ -716,11 +714,13 @@
   }
   if (skipcomment(&lf, &c))  /* read initial portion */
     lf.buff[lf.n++] = '\n';  /* add line to correct line numbers */
+#ifndef _KERNEL
   if (c == LUA_SIGNATURE[0] && filename) {  /* binary file? */
     lf.f = freopen(filename, "rb", lf.f);  /* reopen in binary mode */
     if (lf.f == NULL) return errfile(L, "reopen", fnameindex);
     skipcomment(&lf, &c);  /* re-read initial portion */
   }
+#endif /* _KERNEL */
   if (c != EOF)
     lf.buff[lf.n++] = c;  /* 'c' is the first character of the stream */
   status = lua_load(L, getF, &lf, lua_tostring(L, -1), mode);
@@ -733,7 +733,6 @@
   lua_remove(L, fnameindex);
   return status;
 }
-#endif /* _KERNEL */
 
 
 typedef struct LoadS {
Index: external/mit/lua/dist/src/lauxlib.h
===================================================================
RCS file: /cvsroot/src/external/mit/lua/dist/src/lauxlib.h,v
retrieving revision 1.4
diff -u -r1.4 lauxlib.h
--- external/mit/lua/dist/src/lauxlib.h	28 Jan 2016 14:41:39 -0000	1.4
+++ external/mit/lua/dist/src/lauxlib.h	21 Apr 2016 17:13:56 -0000
@@ -71,10 +71,8 @@
 LUALIB_API int (luaL_checkoption) (lua_State *L, int arg, const char *def,
                                    const char *const lst[]);
 
-#ifndef _KERNEL
 LUALIB_API int (luaL_fileresult) (lua_State *L, int stat, const char *fname);
 LUALIB_API int (luaL_execresult) (lua_State *L, int stat);
-#endif /* _KERNEL */
 
 /* predefined references */
 #define LUA_NOREF       (-2)
@@ -83,12 +81,10 @@
 LUALIB_API int (luaL_ref) (lua_State *L, int t);
 LUALIB_API void (luaL_unref) (lua_State *L, int t, int ref);
 
-#ifndef _KERNEL
 LUALIB_API int (luaL_loadfilex) (lua_State *L, const char *filename,
                                                const char *mode);
 
 #define luaL_loadfile(L,f)	luaL_loadfilex(L,f,NULL)
-#endif /* _KERNEL */
 
 LUALIB_API int (luaL_loadbufferx) (lua_State *L, const char *buff, size_t sz,
                                    const char *name, const char *mode);
@@ -131,10 +127,8 @@
 
 #define luaL_typename(L,i)	lua_typename(L, lua_type(L,(i)))
 
-#ifndef _KERNEL
 #define luaL_dofile(L, fn) \
 	(luaL_loadfile(L, fn) || lua_pcall(L, 0, LUA_MULTRET, 0))
-#endif /* _KERNEL */
 
 #define luaL_dostring(L, s) \
 	(luaL_loadstring(L, s) || lua_pcall(L, 0, LUA_MULTRET, 0))
@@ -182,7 +176,6 @@
 
 
 
-#ifndef _KERNEL
 /*
 ** {======================================================
 ** File handles for IO library
@@ -204,7 +197,6 @@
 } luaL_Stream;
 
 /* }====================================================== */
-#endif /* _KERNEL */
 
 
 
Index: external/mit/lua/dist/src/lbaselib.c
===================================================================
RCS file: /cvsroot/src/external/mit/lua/dist/src/lbaselib.c,v
retrieving revision 1.6
diff -u -r1.6 lbaselib.c
--- external/mit/lua/dist/src/lbaselib.c	28 Jan 2016 14:41:39 -0000	1.6
+++ external/mit/lua/dist/src/lbaselib.c	21 Apr 2016 17:13:56 -0000
@@ -289,7 +289,6 @@
 }
 
 
-#ifndef _KERNEL
 static int luaB_loadfile (lua_State *L) {
   const char *fname = luaL_optstring(L, 1, NULL);
   const char *mode = luaL_optstring(L, 2, NULL);
@@ -297,7 +296,6 @@
   int status = luaL_loadfilex(L, fname, mode);
   return load_aux(L, status, env);
 }
-#endif /* _KERNEL */
 
 
 /*
@@ -360,7 +358,6 @@
 /* }====================================================== */
 
 
-#ifndef _KERNEL
 static int dofilecont (lua_State *L, int d1, lua_KContext d2) {
   (void)d1;  (void)d2;  /* only to match 'lua_Kfunction' prototype */
   return lua_gettop(L) - 1;
@@ -375,7 +372,6 @@
   lua_callk(L, 0, LUA_MULTRET, 0, dofilecont);
   return dofilecont(L, 0, 0);
 }
-#endif /* _KERNEL */
 
 
 static int luaB_assert (lua_State *L) {
@@ -462,15 +458,11 @@
 static const luaL_Reg base_funcs[] = {
   {"assert", luaB_assert},
   {"collectgarbage", luaB_collectgarbage},
-#ifndef _KERNEL
   {"dofile", luaB_dofile},
-#endif /* _KERNEL */
   {"error", luaB_error},
   {"getmetatable", luaB_getmetatable},
   {"ipairs", luaB_ipairs},
-#ifndef _KERNEL
   {"loadfile", luaB_loadfile},
-#endif /* _KERNEL */
   {"load", luaB_load},
 #if defined(LUA_COMPAT_LOADSTRING)
   {"loadstring", luaB_load},
@@ -492,6 +484,9 @@
   /* placeholders */
   {"_G", NULL},
   {"_VERSION", NULL},
+#ifdef _KERNEL
+  {"_KERNEL", NULL},
+#endif
   {NULL, NULL}
 };
 
@@ -506,6 +501,10 @@
   /* set global _VERSION */
   lua_pushliteral(L, LUA_VERSION);
   lua_setfield(L, -2, "_VERSION");
+#ifdef _KERNEL
+  lua_pushboolean(L, true);
+  lua_setfield(L, -2, "_KERNEL");
+#endif
   return 1;
 }
 
Index: external/mit/lua/dist/src/linit.c
===================================================================
RCS file: /cvsroot/src/external/mit/lua/dist/src/linit.c,v
retrieving revision 1.5
diff -u -r1.5 linit.c
--- external/mit/lua/dist/src/linit.c	28 Jan 2016 14:41:39 -0000	1.5
+++ external/mit/lua/dist/src/linit.c	21 Apr 2016 17:13:56 -0000
@@ -50,14 +50,10 @@
 #endif /* _KERNEL */
   {LUA_COLIBNAME, luaopen_coroutine},
   {LUA_TABLIBNAME, luaopen_table},
-#ifndef _KERNEL
   {LUA_IOLIBNAME, luaopen_io},
   {LUA_OSLIBNAME, luaopen_os},
-#endif /* _KERNEL */
   {LUA_STRLIBNAME, luaopen_string},
-#ifndef _KERNEL
   {LUA_MATHLIBNAME, luaopen_math},
-#endif /* _KERNEL */
   {LUA_UTF8LIBNAME, luaopen_utf8},
   {LUA_DBLIBNAME, luaopen_debug},
 #if defined(LUA_COMPAT_BITLIB)
Index: external/mit/lua/dist/src/liolib.c
===================================================================
RCS file: /cvsroot/src/external/mit/lua/dist/src/liolib.c,v
retrieving revision 1.5
diff -u -r1.5 liolib.c
--- external/mit/lua/dist/src/liolib.c	28 Jan 2016 14:41:39 -0000	1.5
+++ external/mit/lua/dist/src/liolib.c	21 Apr 2016 17:13:56 -0000
@@ -12,12 +12,14 @@
 #include "lprefix.h"
 
 
+#ifndef _KERNEL
 #include <ctype.h>
 #include <errno.h>
 #include <locale.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#endif /* _KERNEL */
 
 #include "lua.h"
 
@@ -46,6 +48,7 @@
 
 #endif
 
+#ifndef _KERNEL
 /*
 ** {======================================================
 ** l_popen spawns a new process connected to the current
@@ -78,6 +81,8 @@
 
 #endif				/* } */
 
+#endif /* _KERNEL */
+
 /* }====================================================== */
 
 
@@ -96,6 +101,7 @@
 #endif				/* } */
 
 
+#ifndef _KERNEL
 /*
 ** {======================================================
 ** l_fseek: configuration for longer offsets
@@ -133,6 +139,8 @@
 
 /* }====================================================== */
 
+#endif /* _KERNEL */
+
 
 #define IO_PREFIX	"_IO_"
 #define IOPREF_LEN	(sizeof(IO_PREFIX)/sizeof(char) - 1)
@@ -260,6 +268,7 @@
 }
 
 
+#ifndef _KERNEL
 /*
 ** function to close 'popen' files
 */
@@ -285,6 +294,8 @@
   return (p->f == NULL) ? luaL_fileresult(L, 0, NULL) : 1;
 }
 
+#endif /* _KERNEL */
+
 
 static FILE *getiofile (lua_State *L, const char *findex) {
   LStream *p;
@@ -425,6 +436,7 @@
 }
 
 
+#ifndef _KERNEL
 /*
 ** Read a number: first reads a valid prefix of a numeral into a buffer.
 ** Then it calls 'lua_stringtonumber' to check whether the format is
@@ -470,6 +482,8 @@
   lua_pushliteral(L, "");
   return (c != EOF);
 }
+#endif
+
 
 
 static int read_line (lua_State *L, FILE *f, int chop) {
@@ -523,7 +537,9 @@
   int nargs = lua_gettop(L) - 1;
   int success;
   int n;
+#ifndef _KERNEL
   clearerr(f);
+#endif /* _KERNEL */
   if (nargs == 0) {  /* no arguments? */
     success = read_line(L, f, 1);
     n = first+1;  /* to return 1 result */
@@ -534,15 +550,20 @@
     for (n = first; nargs-- && success; n++) {
       if (lua_type(L, n) == LUA_TNUMBER) {
         size_t l = (size_t)luaL_checkinteger(L, n);
+#ifdef _KERNEL
+#define test_eof(L, f)	1
+#endif
         success = (l == 0) ? test_eof(L, f) : read_chars(L, f, l);
       }
       else {
         const char *p = luaL_checkstring(L, n);
         if (*p == '*') p++;  /* skip optional '*' (for compatibility) */
         switch (*p) {
+#ifndef _KERNEL
           case 'n':  /* number */
             success = read_number(L, f);
             break;
+#endif 
           case 'l':  /* line */
             success = read_line(L, f, 1);
             break;
@@ -614,6 +635,7 @@
   int nargs = lua_gettop(L) - arg;
   int status = 1;
   for (; nargs--; arg++) {
+#ifndef _KERNEL
     if (lua_type(L, arg) == LUA_TNUMBER) {
       /* optimization: could be done exactly as for strings */
       int len = lua_isinteger(L, arg)
@@ -622,10 +644,11 @@
       status = status && (len > 0);
     }
     else {
+#endif
       size_t l;
       const char *s = luaL_checklstring(L, arg, &l);
       status = status && (fwrite(s, sizeof(char), l, f) == l);
-    }
+//    }
   }
   if (status) return 1;  /* file handle already on stack top */
   else return luaL_fileresult(L, status, NULL);
@@ -644,6 +667,7 @@
 }
 
 
+#ifndef _KERNEL
 static int f_seek (lua_State *L) {
   static const int mode[] = {SEEK_SET, SEEK_CUR, SEEK_END};
   static const char *const modenames[] = {"set", "cur", "end", NULL};
@@ -683,6 +707,7 @@
 static int f_flush (lua_State *L) {
   return luaL_fileresult(L, fflush(tofile(L)) == 0, NULL);
 }
+#endif /* _KERNEL */
 
 
 /*
@@ -690,15 +715,23 @@
 */
 static const luaL_Reg iolib[] = {
   {"close", io_close},
+#ifndef _KERNEL
   {"flush", io_flush},
+#endif
   {"input", io_input},
+#ifndef _KERNEL
   {"lines", io_lines},
+#endif
   {"open", io_open},
   {"output", io_output},
+#ifndef _KERNEL
   {"popen", io_popen},
+#endif
   {"read", io_read},
+#ifndef _KERNEL
   {"tmpfile", io_tmpfile},
   {"type", io_type},
+#endif
   {"write", io_write},
   {NULL, NULL}
 };
@@ -709,11 +742,15 @@
 */
 static const luaL_Reg flib[] = {
   {"close", io_close},
+#ifndef _KERNEL
   {"flush", f_flush},
   {"lines", f_lines},
+#endif
   {"read", f_read},
+#ifndef _KERNEL
   {"seek", f_seek},
   {"setvbuf", f_setvbuf},
+#endif
   {"write", f_write},
   {"__gc", f_gc},
   {"__tostring", f_tostring},
@@ -730,6 +767,7 @@
 }
 
 
+#ifndef _KERNEL
 /*
 ** function to (not) close the standard files stdin, stdout, and stderr
 */
@@ -753,15 +791,18 @@
   }
   lua_setfield(L, -2, fname);  /* add file to module */
 }
+#endif /* _KERNEL */
 
 
 LUAMOD_API int luaopen_io (lua_State *L) {
   luaL_newlib(L, iolib);  /* new module */
   createmeta(L);
+#ifndef _KERNEL
   /* create (and set) default files */
   createstdfile(L, stdin, IO_INPUT, "stdin");
   createstdfile(L, stdout, IO_OUTPUT, "stdout");
   createstdfile(L, stderr, NULL, "stderr");
+#endif /* _KERNEL */
   return 1;
 }
 
Index: external/mit/lua/dist/src/lmathlib.c
===================================================================
RCS file: /cvsroot/src/external/mit/lua/dist/src/lmathlib.c,v
retrieving revision 1.5
diff -u -r1.5 lmathlib.c
--- external/mit/lua/dist/src/lmathlib.c	28 Jan 2016 14:41:39 -0000	1.5
+++ external/mit/lua/dist/src/lmathlib.c	21 Apr 2016 17:13:56 -0000
@@ -12,8 +12,10 @@
 #include "lprefix.h"
 
 
+#ifndef _KERNEL
 #include <stdlib.h>
 #include <math.h>
+#endif
 
 #include "lua.h"
 
@@ -21,8 +23,10 @@
 #include "lualib.h"
 
 
+#ifndef _KERNEL
 #undef PI
 #define PI	(l_mathop(3.141592653589793238462643383279502884))
+#endif
 
 
 #if !defined(l_rand)		/* { */
@@ -38,6 +42,8 @@
 #endif				/* } */
 
 
+
+#ifndef _KERNEL
 static int math_abs (lua_State *L) {
   if (lua_isinteger(L, 1)) {
     lua_Integer n = lua_tointeger(L, 1);
@@ -125,6 +131,7 @@
   return 1;
 }
 
+#endif
 
 static int math_fmod (lua_State *L) {
   if (lua_isinteger(L, 1) && lua_isinteger(L, 2)) {
@@ -136,13 +143,16 @@
     else
       lua_pushinteger(L, lua_tointeger(L, 1) % d);
   }
+#ifndef _KERNEL
   else
     lua_pushnumber(L, l_mathop(fmod)(luaL_checknumber(L, 1),
                                      luaL_checknumber(L, 2)));
+#endif
   return 1;
 }
 
 
+#ifndef _KERNEL
 /*
 ** next function does not use 'modf', avoiding problems with 'double*'
 ** (which is not compatible with 'float*') when lua_Number is not
@@ -209,6 +219,7 @@
   lua_pushnumber(L, luaL_checknumber(L, 1) * (PI / l_mathop(180.0)));
   return 1;
 }
+#endif
 
 
 static int math_min (lua_State *L) {
@@ -245,7 +256,11 @@
 */
 static int math_random (lua_State *L) {
   lua_Integer low, up;
+#ifndef _KERNEL
   double r = (double)l_rand() * (1.0 / ((double)L_RANDMAX + 1.0));
+#else
+  long r = l_rand();
+#endif
   switch (lua_gettop(L)) {  /* check number of arguments */
     case 0: {  /* no arguments */
       lua_pushnumber(L, (lua_Number)r);  /* Number between 0 and 1 */
@@ -267,7 +282,11 @@
   luaL_argcheck(L, low <= up, 1, "interval is empty"); 
   luaL_argcheck(L, low >= 0 || up <= LUA_MAXINTEGER + low, 1,
                    "interval too large");
+#ifndef _KERNEL
   r *= (double)(up - low) + 1.0;
+#else
+  r %= (up - low) + 1;
+#endif
   lua_pushinteger(L, (lua_Integer)r + low);
   return 1;
 }
@@ -295,6 +314,7 @@
 }
 
 
+#ifndef _KERNEL
 /*
 ** {==================================================================
 ** Deprecated functions (for compatibility only)
@@ -346,9 +366,11 @@
 #endif
 /* }================================================================== */
 
+#endif
 
 
 static const luaL_Reg mathlib[] = {
+#ifndef _KERNEL
   {"abs",   math_abs},
   {"acos",  math_acos},
   {"asin",  math_asin},
@@ -359,19 +381,27 @@
   {"exp",   math_exp},
   {"tointeger", math_toint},
   {"floor", math_floor},
+#endif
   {"fmod",   math_fmod},
+#ifndef _KERNEL
   {"ult",   math_ult},
   {"log",   math_log},
+#endif
   {"max",   math_max},
   {"min",   math_min},
+#ifndef _KERNEL
   {"modf",   math_modf},
   {"rad",   math_rad},
+#endif
   {"random",     math_random},
   {"randomseed", math_randomseed},
+#ifndef _KERNEL
   {"sin",   math_sin},
   {"sqrt",  math_sqrt},
   {"tan",   math_tan},
+#endif
   {"type", math_type},
+#ifndef _KERNEL
 #if defined(LUA_COMPAT_MATHLIB)
   {"atan2", math_atan},
   {"cosh",   math_cosh},
@@ -384,6 +414,7 @@
 #endif
   /* placeholders */
   {"pi", NULL},
+#endif
   {"huge", NULL},
   {"maxinteger", NULL},
   {"mininteger", NULL},
@@ -396,8 +427,10 @@
 */
 LUAMOD_API int luaopen_math (lua_State *L) {
   luaL_newlib(L, mathlib);
+#ifndef _KERNEL
   lua_pushnumber(L, PI);
   lua_setfield(L, -2, "pi");
+#endif
   lua_pushnumber(L, (lua_Number)HUGE_VAL);
   lua_setfield(L, -2, "huge");
   lua_pushinteger(L, LUA_MAXINTEGER);
Index: external/mit/lua/dist/src/loslib.c
===================================================================
RCS file: /cvsroot/src/external/mit/lua/dist/src/loslib.c,v
retrieving revision 1.5
diff -u -r1.5 loslib.c
--- external/mit/lua/dist/src/loslib.c	28 Jan 2016 14:41:39 -0000	1.5
+++ external/mit/lua/dist/src/loslib.c	21 Apr 2016 17:13:56 -0000
@@ -12,11 +12,16 @@
 #include "lprefix.h"
 
 
+#ifndef _KERNEL
 #include <errno.h>
 #include <locale.h>
 #include <stdlib.h>
 #include <string.h>
 #include <time.h>
+#else /* _KERNEL */
+#include <sys/time.h>
+#include <sys/proc.h>
+#endif /* _KERNEL */
 
 #include "lua.h"
 
@@ -119,7 +124,13 @@
 
 /* ISO C definitions */
 #define LUA_TMPNAMBUFSIZE	L_tmpnam
+#ifndef _KERNEL
 #define lua_tmpnam(b,e)		{ e = (tmpnam(b) == NULL); }
+#else /* _KERNEL */
+#define lua_tmpnam(b,e) { \
+        strcpy(b, KLUA_TMPNAMTEMPLATE) ; \
+        e = (tmpnam(b) == NULL); }
+#endif /* _KERNEL */
 
 #endif				/* } */
 
@@ -129,6 +140,7 @@
 
 
 
+#ifndef _KERNEL
 static int os_execute (lua_State *L) {
   const char *cmd = luaL_optstring(L, 1, NULL);
   int stat = system(cmd);
@@ -139,6 +151,7 @@
     return 1;
   }
 }
+#endif /* _KERNEL */
 
 
 static int os_remove (lua_State *L) {
@@ -147,11 +160,13 @@
 }
 
 
+#ifndef _KERNEL
 static int os_rename (lua_State *L) {
   const char *fromname = luaL_checkstring(L, 1);
   const char *toname = luaL_checkstring(L, 2);
   return luaL_fileresult(L, rename(fromname, toname) == 0, NULL);
 }
+#endif /* _KERNEL */
 
 
 static int os_tmpname (lua_State *L) {
@@ -165,18 +180,35 @@
 }
 
 
+#ifndef _KERNEL
 static int os_getenv (lua_State *L) {
   lua_pushstring(L, getenv(luaL_checkstring(L, 1)));  /* if NULL push nil */
   return 1;
 }
+#endif /* _KERNEL */
 
 
+#ifndef _KERNEL
 static int os_clock (lua_State *L) {
   lua_pushnumber(L, ((lua_Number)clock())/(lua_Number)CLOCKS_PER_SEC);
   return 1;
 }
+#else /* _KERNEL */
+static int os_clock (lua_State *L) {
+  struct rusage ru;
+  long s;
+
+  getrusage1(curlwp->l_proc, RUSAGE_SELF, &ru);
+  s = ru.ru_utime.tv_sec * 1000 + ru.ru_stime.tv_sec * 1000 +
+      ru.ru_utime.tv_usec / 1000 + ru.ru_stime.tv_usec / 1000;
 
+  lua_pushinteger(L, s);
+  return 1;
+}
+#endif /* _KERNEL */
 
+
+#ifndef _KERNEL
 /*
 ** {======================================================
 ** Time/Date operations
@@ -303,8 +335,10 @@
   }
   return 1;
 }
+#endif /* _KERNEL */
 
 
+#ifndef _KERNEL
 static int os_time (lua_State *L) {
   time_t t;
   if (lua_isnoneornil(L, 1))  /* called without args? */
@@ -327,18 +361,35 @@
   l_pushtime(L, t);
   return 1;
 }
+#else /* _KERNEL */
+static int os_time(lua_State *L) {
+  time_t t;
+  struct bintime bt;
+  bintime(&bt);
+  t = bt.sec;
+  if (t != (time_t)(l_timet)t || t == (time_t)(-1))
+    luaL_error(L, "time result cannot be represented in this installation");
+  l_pushtime(L, t);
+  return 1;
+}
+#endif /* _KERNEL */
 
 
 static int os_difftime (lua_State *L) {
   time_t t1 = l_checktime(L, 1);
   time_t t2 = l_checktime(L, 2);
+#ifndef _KERNEL
   lua_pushnumber(L, (lua_Number)difftime(t1, t2));
+#else
+  lua_pushnumber(L, (lua_Number) t1 - t2);
+#endif
   return 1;
 }
 
 /* }====================================================== */
 
 
+#ifndef _KERNEL
 static int os_setlocale (lua_State *L) {
   static const int cat[] = {LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY,
                       LC_NUMERIC, LC_TIME};
@@ -362,18 +413,25 @@
   if (L) exit(status);  /* 'if' to avoid warnings for unreachable 'return' */
   return 0;
 }
+#endif
 
 
 static const luaL_Reg syslib[] = {
   {"clock",     os_clock},
+#ifndef _KERNEL
   {"date",      os_date},
+#endif
   {"difftime",  os_difftime},
+#ifndef _KERNEL
   {"execute",   os_execute},
   {"exit",      os_exit},
   {"getenv",    os_getenv},
+#endif
   {"remove",    os_remove},
+#ifndef _KERNEL
   {"rename",    os_rename},
   {"setlocale", os_setlocale},
+#endif
   {"time",      os_time},
   {"tmpname",   os_tmpname},
   {NULL, NULL}
Index: external/mit/lua/dist/src/luaconf.h
===================================================================
RCS file: /cvsroot/src/external/mit/lua/dist/src/luaconf.h,v
retrieving revision 1.16
diff -u -r1.16 luaconf.h
--- external/mit/lua/dist/src/luaconf.h	28 Jan 2016 14:41:39 -0000	1.16
+++ external/mit/lua/dist/src/luaconf.h	21 Apr 2016 17:13:56 -0000
@@ -498,6 +498,14 @@
 #error "numeric float type not defined"
 
 #endif					/* } */
+#else
+
+#include <krand.h>
+
+#define HUGE_VAL	(lua_Number) __builtin_huge_val()
+#define RAND_MAX	0x7fffffff
+#define l_rand()	krand()
+#define l_srand(s)	ksrand(s)
 #endif /*_KERNEL */
 
 
@@ -822,6 +830,36 @@
 #define lua_writestring(s,l)	printf("%s", (s))
 #define lua_writeline()		printf("\n")
 
+#define BUFSIZ  1024
+#define EOF     -1
+#define errno   -1
+#define strerror(errno) "kernel lua: error"
+
+#define FILE KFILE
+
+#include <kio.h>
+
+#define remove(path)		kremove(path)
+#define fopen(path, mode)	kfopen(path, mode)
+#define fclose(fp)			kfclose(fp)
+
+#define feof(fp)	0
+#define ferror(fp)	0
+#define fread(buff, sz, nb, fp)		kfread(buff, sz * nb, fp)
+#define fwrite(buff, sz, nb, fp)	kfwrite(buff, sz * nb, fp)
+
+#define getc(fp)	kfgetc(fp)
+
+#include <ktmpnam.h>
+
+#define L_tmpnam	32
+#define tmpnam(nam)	ktmpnam(nam)
+#define KLUA_TMPNAMTEMPLATE	"/tmp/klua_XXXXXX"
+
+#define stdin	NULL
+#define stdout	NULL
+#define stderr	NULL
+
 /* string.h */
 #define strcoll strcmp
 
